<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>themodernscientist</title><link>http://www.themodernscientist.com/</link><description>biophysicist, mac-unix zealot, pythonista</description><atom:link href="http://themodernscientist.com/feeds/main_rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 22 Jul 2015 07:42:00 -0400</lastBuildDate><item><title>Throwing the Book at Your Data</title><link>http://www.themodernscientist.com/posts/2015/2015-07-22-throwing_the_book_at_your_data/</link><description>&lt;p&gt;You may have noticed all has been quiet on the blog front from me lately. There are several reasons for this,&lt;sup id="fnref:move_five_papers"&gt;&lt;a class="footnote-ref" href="#fn:move_five_papers" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; but I can assure you it isn't for lack of things to write about. Today, I'm happy to share with you one of the projects that has been keeping me busy. I am writing a book about one of my favorite topics: Python!&lt;/p&gt;
&lt;p&gt;The book is entitled "Unix and Python to the Rescue!" and you can read more about it on the &lt;a href="http://rescuedbycode.com"&gt;official website&lt;/a&gt;. As you will &lt;a href="http://rescuedbycode.com/about-the-authors"&gt;notice&lt;/a&gt;, I'm not writing the book alone. I am fortunate to be working with Keith Bradnam and Ian Korf, who are both seasoned veterans of the computational book authorship world.&lt;sup id="fnref:perl_book"&gt;&lt;a class="footnote-ref" href="#fn:perl_book" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; Keith and Ian work at the UC Davis Genome Center, where Keith is an Associate Project Scientist and Ian is a Professor. You can read more about Keith, including his &lt;a href="http://www.acgt.me/blog/2015/7/20/taking-steps-to-write-a-new-book-about-programming"&gt;announcement&lt;/a&gt; of our book on his excellent blog, &lt;a href="http://www.acgt.me"&gt;ACGT&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Do we really need another book on Python?&lt;/h2&gt;
&lt;p&gt;There are quite a few books on the topic of Python programming, many of which are excellent, so you may be asking yourself why we need another one. Keith, Ian, and I asked ourselves this when we discussed writing the book. However, I believe the goals of this book, which I've paraphrased from the book's announcement, fill a niche in the Python programming world:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduce both Unix &amp;amp; Python assuming no prior knowledge of either&lt;/li&gt;
&lt;li&gt;Include both basic and more advanced topics that are relevant to scientists&lt;/li&gt;
&lt;li&gt;Whenever possible, make topics "digestible" by introducing only one new concept at a time&lt;/li&gt;
&lt;li&gt;Maintain an engaging and fun style&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For a book with this focus, I think it is particularly important to cover both Unix and Python because it's nearly impossible to use the later with some knowledge of the former. And there are many times when a few Unix commands can provide a quick answer to help you decide if more in-depth analysis with Python is appropriate. &lt;/p&gt;
&lt;h2&gt;Why should life scientists learn to code?&lt;/h2&gt;
&lt;p&gt;Another great question. Scientists are busy people and there are many data analysis tools available that don't require learning how to program. However, it is my belief--based on my own experience--that using a prefabricated tool, such as a spreadsheet or graphing program, inherently limits you to someone else's idea of what analytical questions you should be asking about your data. In today's scientific world, the amount and type of data we need to understand changes rapidly, and these programs can quickly become limiting. By taking the time to learn a set of basic tools that can be combined in limitless ways,&lt;sup id="fnref:unix_philosophy"&gt;&lt;a class="footnote-ref" href="#fn:unix_philosophy" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; you empower yourself to ask the kind of analytical questions &lt;em&gt;you&lt;/em&gt; want to ask about your data.&lt;/p&gt;
&lt;p&gt;I also strongly believe in using open source tools, like Unix and Python, because of their accessibility and relative permanence. I have personally been faced with the decision of how to proceed with data analysis when university administration failed to renew a software license before it expired.&lt;sup id="fnref:learn_python"&gt;&lt;a class="footnote-ref" href="#fn:learn_python" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; I have also assisted other scientists who've had data trapped in an unreadable file format because they no longer have access to the program that created the files. I think situations such as these are unacceptable. Even if Python development ceased completely tomorrow,&lt;sup id="fnref:worst_case"&gt;&lt;a class="footnote-ref" href="#fn:worst_case" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; the code would still compile and run on computers for several years to come, allowing time to transition to something new. More importantly, all your data and analyses will remain in an accessible (readable) format indefinitely.&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;Mostly lots of writing and editing! I will also be joining Keith in tweeting from the &lt;a href="https://twitter.com/rescuedbycode"&gt;@rescuedbycode&lt;/a&gt; Twitter account. We look forward to sharing Python tips and chatting with you there.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:move_five_papers"&gt;
&lt;p&gt;Nothing eats up your free time like moving to a new city and submitting five publications, all in one year.&amp;#160;&lt;a class="footnote-backref" href="#fnref:move_five_papers" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:perl_book"&gt;
&lt;p&gt;Keith and Ian wrote &lt;a href="http://rescuedbycode.com/unix-and-perl-book"&gt;"Unix and Perl to the Rescue!"&lt;/a&gt;, which is in some ways a cousin to our current efforts.&amp;#160;&lt;a class="footnote-backref" href="#fnref:perl_book" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:unix_philosophy"&gt;
&lt;p&gt;This is part of the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy"&gt;Unix philosophy&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:unix_philosophy" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:learn_python"&gt;
&lt;p&gt;This experience is actually what prompted me to learn Python. Fortunately, I already had some programming knowledge and was at a position in my career where I was able to spend a little time learning a new language.&amp;#160;&lt;a class="footnote-backref" href="#fnref:learn_python" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:worst_case"&gt;
&lt;p&gt;I certainly hope this never happens, but for the sake of exploring worst case scenarios, let's consider it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:worst_case" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Wed, 22 Jul 2015 07:42:00 -0400</pubDate><guid>tag:www.themodernscientist.com,2015-07-22:posts/2015/2015-07-22-throwing_the_book_at_your_data/</guid><category>python</category><category>science</category><category>openscience</category><category>shell</category></item><item><title>Secure Password Use in Scripts</title><link>http://www.themodernscientist.com/posts/2015/2015-01-04-secure_password_use_in_scripts/</link><description>&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you're using passwords in shell scripts, see Daniel Jalkut's reply below about using OS X's built-in &lt;code&gt;security&lt;/code&gt; command instead of his AppleScript library.&lt;/p&gt;
&lt;p&gt;One of my goals for the new year&lt;sup id="fnref:resolution"&gt;&lt;a class="footnote-ref" href="#fn:resolution" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; is to be more security minded in my use of technology. This is a broad statement, but I have some very specific points in mind, including more regular use of a self-hosted VPN (the topic of a future blog post) and avoiding the bad habit of using passwords in shell scripts (the topic of this blog post).&lt;/p&gt;
&lt;p&gt;The use of security credentials, such as a password, is an integral part of life with technology. For those of us who like to automate things, the need often arises to supply such credentials in a script. The simplest, and least secure, way to do this is to enter the password in the script in plain text form. Having done this myself and seen countless other people who are way better at this automation thing than me do the &lt;a href="http://www.macdrifter.com/2013/03/pause-timemachine-macro.html"&gt;same&lt;/a&gt;, I know it is easy to do. I'm certainly not here to lecture anyone about best practices, but there is another option and it's not that difficult to use. This method involves a little AppleScript and &lt;a href="http://www.red-sweater.com"&gt;Daniel Jalkut's&lt;/a&gt; excellent utility, &lt;a href="http://www.red-sweater.com/blog/170/usable-keychain-scripting"&gt;Usable Keychain Scripting&lt;/a&gt;, with the latest version available &lt;a href="http://www.red-sweater.com/blog/2035/usable-keychain-scripting-for-lion"&gt;here&lt;/a&gt;. I don't see much mention of Usable Keychain Scripting online, so I thought a tutorial would be a handy way to start the new year.&lt;sup id="fnref:yosemite"&gt;&lt;a class="footnote-ref" href="#fn:yosemite" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;Motivation for Usable Keychain Scripting&lt;/h2&gt;
&lt;p&gt;Daniel's blog posts explain his personal motivations for writing and updating Usable Keychain Scripting, but I first discovered the application when Apple removed keychain scripting from Lion, thus making it impossible to access keychain entries with AppleScript. His utility fills that niche for me, though as mentioned, I don't use it as often as I should.&lt;/p&gt;
&lt;p&gt;The general idea is to create a specific keychain entry with a title and password in one of your keychains using Keychain Access&lt;sup id="fnref:1password"&gt;&lt;a class="footnote-ref" href="#fn:1password" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;. Then the password contained in this entry is accessed using the AppleScript library provided by Usable Keychain Scripting. AppleScript can be called from many languages, including the shell, thus allowing the password to be retrieved when needed.&lt;sup id="fnref:security"&gt;&lt;a class="footnote-ref" href="#fn:security" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;Create a keychain password&lt;/h2&gt;
&lt;p&gt;The first step is to create a password entry in Keychain Access. The main consideration here is that although multiple keychain entries can have the same name, it's difficult (and more work) to distinguish between them in an AppleScript. Thus, it's best to ensure the entry has a unique name. &lt;/p&gt;
&lt;p&gt;Here's an example I created to mount the partitions on our Drobo, called KUPHOG-NAS:&lt;sup id="fnref:kuphog"&gt;&lt;a class="footnote-ref" href="#fn:kuphog" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;KUPHOG NAS drive password&amp;quot;" src="http://www.themodernscientist.com/images/2015-01-04_secure_password_use_in_scripts_1.png" title="KUPHOG NAS drive password" /&gt;&lt;/p&gt;
&lt;h2&gt;Configure Usable Keychain Scripting&lt;/h2&gt;
&lt;p&gt;Before Usable Keychain Scripting can be called from a shell script, some setup is required. I find it easiest to do this in Script Editor. First, Usable Keychain Scripting has to be downloaded and installed in your computer's Applications directory, if this hasn't been done already. Next, the program's AppleScript dictionary has to be installed. This is done by opening the Script Editor's Library window (located in the Window menu) and then clicking on the plus sign. This opens a window to the Applications directory, where Usable Keychain Scripting should be selected. When finished, the program will appear in the Library window, like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;AppleScript dictionary installation&amp;quot;" src="http://www.themodernscientist.com/images/2015-01-04_secure_password_use_in_scripts_2.png" title="AppleScript dictionary installation" /&gt;&lt;/p&gt;
&lt;p&gt;Then the Usable Keychain Scripting AppleScript library should be tested &lt;em&gt;within&lt;/em&gt; Script Editor. This is important because your login password has to be entered the first time this AppleScript library is accessed, and the password entry window doesn't always work from a shell script.&lt;/p&gt;
&lt;p&gt;Here's a sample AppleScript that accesses the password created for the Drobo above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usable Keychain Scripting&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;myPassword&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;keychain&lt;/span&gt; &lt;span class="nb"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;keychain&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/mlgill/Library/Keychains/login.keychain&amp;quot;&lt;/span&gt; &lt;span class="nb"&gt;whose&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;KUPHOG-NAS&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As is probably obvious, this password was created in the login keychain for my account in Keychain Access. When this is the case, a simpler  alternative can also be used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usable Keychain Scripting&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;myPassword&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;keychain&lt;/span&gt; &lt;span class="nb"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;current&lt;/span&gt; &lt;span class="nv"&gt;keychain&lt;/span&gt; &lt;span class="nb"&gt;whose&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;KUPHOG-NAS&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When either of the AppleScripts is executed, the desired password will be returned. This indicates everything is working:&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;AppleScript test of Usable Keychain Scripting&amp;quot;" src="http://www.themodernscientist.com/images/2015-01-04_secure_password_use_in_scripts_3.png" title="AppleScript test of Usable Keychain Scripting" /&gt;&lt;/p&gt;
&lt;h2&gt;Incorporating Usable Keychain Scripting in a shell script&lt;/h2&gt;
&lt;p&gt;The last step is using your new toy in a shell script. Continuing with the Drobo example, here's how to mount a drive partition from the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;NAS_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;KUPHOG-NAS&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Michelle&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;NAS_MOUNTPOINT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TimeMachineBackup&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Execute the AppleScript to retrieve the password&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;osascript &lt;span class="s"&gt;&amp;lt;&amp;lt; &amp;#39;END&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;tell application &amp;quot;Usable Keychain Scripting&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;set myPassword to password of first keychain item of current keychain whose name is &amp;quot;KUPHOG-NAS&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;end tell&lt;/span&gt;
&lt;span class="s"&gt;END&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; ! -e /Volumes/&lt;span class="nv"&gt;$NAS_MOUNTPOINT&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    mkdir /Volumes/&lt;span class="nv"&gt;$NAS_MOUNTPOINT&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

mount_smbfs smb://&lt;span class="nv"&gt;$USERNAME&lt;/span&gt;:&lt;span class="nv"&gt;$PASSWORD&lt;/span&gt;@&lt;span class="nv"&gt;$NAS_ADDRESS&lt;/span&gt;/&lt;span class="nv"&gt;$NAS_MOUNTPOINT&lt;/span&gt; /Volumes/&lt;span class="nv"&gt;$NAS_MOUNTPOINT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! Here's to a more secure 2015!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:resolution"&gt;
&lt;p&gt;I dislike the absolutism of the word resolution, but call it that if you prefer.&amp;#160;&lt;a class="footnote-backref" href="#fnref:resolution" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:yosemite"&gt;
&lt;p&gt;Contrary to some discussion I've seen, Usable Keychain Scripting works on Yosemite (and presumably also Mavericks). It seems there are some changes to the syntax though.&amp;#160;&lt;a class="footnote-backref" href="#fnref:yosemite" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:1password"&gt;
&lt;p&gt;I'd prefer to use 1Password for this task, but there is not a script library that works with 1Password that I know of.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1password" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:security"&gt;
&lt;p&gt;I can imagine there are insecurities associated with Usable Keychain Scripting, but it is certainly more secure than plain text. Use common sense here.&amp;#160;&lt;a class="footnote-backref" href="#fnref:security" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:kuphog"&gt;
&lt;p&gt;Yes, my husband and I named our Drobo after our allegiance to our alma mater. Rock Chalk, Jayhawk!&amp;#160;&lt;a class="footnote-backref" href="#fnref:kuphog" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Sun, 04 Jan 2015 19:48:00 -0500</pubDate><guid>tag:www.themodernscientist.com,2015-01-04:posts/2015/2015-01-04-secure_password_use_in_scripts/</guid><category>mac</category><category>automation</category><category>shell</category></item><item><title>Encryption of BitTorrent Sync Peers</title><link>http://www.themodernscientist.com/posts/2014/2014-02-21-encryption_of_bittorrent_sync_peers/</link><description>&lt;p&gt;I'd like to follow up on a previous &lt;a href="http://themodernscientist.com/posts/2014/2014-02-06-torrential_file_synchronization/"&gt;post&lt;/a&gt; covering &lt;a href="http://www.bittorrent.com/sync"&gt;BitTorrent Sync&lt;/a&gt;. In this post, I mentioned privacy is one of the advantages afforded by BitTorrent Sync over traditional cloud storage options, such as Dropbox. Like most cloud storage options, data are encrypted during transmission with BitTorrent Sync.&lt;sup id="fnref:caveat"&gt;&lt;a class="footnote-ref" href="#fn:caveat" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; Once written to a hard drive, though, these files are often not encrypted. This is the case for BitTorrent Sync and many other cloud storage options.&lt;sup id="fnref:exceptions"&gt;&lt;a class="footnote-ref" href="#fn:exceptions" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; For BitTorrent Sync, this issue is of limited concern if all peers are under your control. However, it may be desirable to utilize peers to which others may have access, such as a virtual private server (VPS). In the previous post, I mentioned using a VPS to help guarantee a synchronized peer was always accessible. In these situations, it is desirable to add additional privacy by selectively encrypting data on such peers.&lt;/p&gt;
&lt;p&gt;Previously, I didn't think peer data encryption was possible (yet). As I have since discovered, the recently added &lt;a href="http://www.bittorrent.com/sync/developers/api"&gt;BitTorrent Sync API&lt;/a&gt; enables the encryption of torrent data on selected peers. The BitTorrent forums also &lt;a href="http://forum.bittorrent.com/topic/25823-generate-encrypted-read-only-secret-without-api-key/?p=76262"&gt;describe&lt;/a&gt; how to enable this encryption without using the API, which eliminates the need to be issued an API key.&lt;/p&gt;
&lt;h2&gt;Encryption for Existing Torrents&lt;/h2&gt;
&lt;p&gt;I won't repeat the above forum instructions for encrypting torrents without using the API, but it is useful to describe how &lt;em&gt;existing&lt;/em&gt; torrents were converted to encrypted versions. I would also like to share some observations about how various BitTorrent Sync features apply to encrypted peers.&lt;/p&gt;
&lt;p&gt;Broadly, the conversion process involves removing existing torrents and then reinstating them with an adjusted shared secret. For unencrypted peers, the existing torrent files will be reindexed automatically so minimal synchronization is required. Torrents on encrypted peers will need to be resynchronized since the existing files are not encrypted.&lt;/p&gt;
&lt;h3&gt;Unencrypted Peer Setup&lt;/h3&gt;
&lt;p&gt;Before torrent conversion, all peers were fully synchronized and an unsynchronized backup of each of the torrents was created.&lt;sup id="fnref:notbackup"&gt;&lt;a class="footnote-ref" href="#fn:notbackup" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; After backing up the files, the existing shared secret was noted for each of the torrents that would be encrypted. Then the torrent instances—but not the files themselves—were deleted from each of the peers. For each unencrypted peer, the torrent instance was recreated with the first letter of the shared secret changed from an &lt;code&gt;A&lt;/code&gt; to a &lt;code&gt;D&lt;/code&gt;, as described in the aforementioned forum directions. Each peer was allowed to completely reindex all files associated with a torrent before adding another peer into the mix.&lt;/p&gt;
&lt;h3&gt;Encrypted Peer Setup&lt;/h3&gt;
&lt;p&gt;The process was slightly more complicated for peers that contained an encrypted version of the torrent. First, the existing unencrypted files were moved to a different location, as a temporary backup, and empty destination directories were created for the torrents. By definition, encrypted peers contain read-only copies of the torrent. So, generating the correct shared secret required noting the read-only shared secret from one of the existing unencrypted peers. To convert this to an &lt;em&gt;encrypted&lt;/em&gt; read-only secret, the first letter was changed from an &lt;code&gt;E&lt;/code&gt; to an &lt;code&gt;F&lt;/code&gt; and only the first 33 characters were used.&lt;/p&gt;
&lt;p&gt;After setup, the encrypted peer was allowed to synchronize the torrent. Unlike the unencrypted peers, quite a few errors were generated during this process in the log file of the encrypted peer. However, synchronization did complete, and the encrypted torrent was successfully used as the sole restore point to an unencrypted torrent on a new peer. Thus, the log errors likely refer to recoverable issues that may even be sorted out as this feature matures.&lt;/p&gt;
&lt;h2&gt;Other Notes About Encryption&lt;/h2&gt;
&lt;p&gt;I didn't measure the time required for the encrypted peer to fully synchronize, but I don't think the process took longer than it previously had for the same unencrypted torrent on this machine.&lt;sup id="fnref:lotsoffactors"&gt;&lt;a class="footnote-ref" href="#fn:lotsoffactors" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; According to forum &lt;a href="http://forum.bittorrent.com/topic/25854-read-only-encrypted-peers/?hl=encrypt%2A"&gt;discussion&lt;/a&gt;, this process may take 2–3 times longer for lower end hardware, such as that containing an ARM processor, but little difference is noted for higher end computers. Torrent encryption may also slow down the listing of files on mobile devices.&lt;/p&gt;
&lt;p&gt;The resulting encrypted torrent maintained the same folder structure as the unencrypted peers, except that all file contents and file/directory names were encrypted. I suspect the directory structure is maintained in effort to keep encrypted peers compatible with other API features, such as selective file synchronization. File exclusion entries in &lt;code&gt;.SyncIgnore&lt;/code&gt; don't seem to work, which I assume is because the file and directory names can't be matched since they are encrypted. Because the nature of the files cannot be discerned, I decided there was no point in enabling the archive feature on the encrypted peer.&lt;/p&gt;
&lt;p&gt;One concern with utilizing a seemingly unsanctioned method is that future software updates may disable loopholes allowing encryption to work without requiring the API. It is even possible such updates could cause file corruption. There are three reasons I'm not worried about either of these scenarios. First, I make incremental &lt;em&gt;unsynchronized&lt;/em&gt; backups of all my files using an &lt;code&gt;rsync&lt;/code&gt;-based script,&lt;sup id="fnref:future"&gt;&lt;a class="footnote-ref" href="#fn:future" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; so there is always a recent, working copy to roll back to. Second, the forums mention encryption will eventually be added to the main program once the aforementioned speed issues are addressed. Third, the encrypted peer is by definition read-only, so (in theory) it can't make any changes to files in the torrents. Thus, I suspect it would, at worst, stop being able to connect to other peers if such software changes were made. As always, you should make your own decision about how to proceed.&lt;/p&gt;
&lt;p&gt;Happy &lt;em&gt;encrypted&lt;/em&gt; synchronizing!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:caveat"&gt;
&lt;p&gt;According to the web site, BitTorrent Sync uses &lt;a href="http://www.bittorrent.com/sync/technology"&gt;AES-128&lt;/a&gt; in counter mode. Security and encryption aren't my areas of expertise. Constructive, informative comments on this topic are welcome.&amp;#160;&lt;a class="footnote-backref" href="#fnref:caveat" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:exceptions"&gt;
&lt;p&gt;Some cloud services do offer end-to-end encryption, such as &lt;a href="https://spideroak.com/"&gt;SpiderOak&lt;/a&gt;. However, these services still use a fee schedule similar to that of Dropbox, making them very expensive for storing large amounts of data.&amp;#160;&lt;a class="footnote-backref" href="#fnref:exceptions" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:notbackup"&gt;
&lt;p&gt;Remember that synchronization is not the same thing as backup. If error(s) are introduced to a set of synchronized files, such as those in a torrent, they will be propagated across all synchronization sources resulting in file corruption.&amp;#160;&lt;a class="footnote-backref" href="#fnref:notbackup" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:lotsoffactors"&gt;
&lt;p&gt;There are many factors that affect this rate, including the fact that three peers were already synchronized when the encrypted peer was setup. Thus, I didn't feel it was worth timing the encrypted synchronization.&amp;#160;&lt;a class="footnote-backref" href="#fnref:lotsoffactors" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:future"&gt;
&lt;p&gt;I plan to cover this &lt;code&gt;rsync&lt;/code&gt; script in a blog post in the near future.&amp;#160;&lt;a class="footnote-backref" href="#fnref:future" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Fri, 21 Feb 2014 19:48:00 -0500</pubDate><guid>tag:www.themodernscientist.com,2014-02-21:posts/2014/2014-02-21-encryption_of_bittorrent_sync_peers/</guid><category>mac</category><category>automation</category></item><item><title>Torrential File Synchronization</title><link>http://www.themodernscientist.com/posts/2014/2014-02-06-torrential_file_synchronization/</link><description>&lt;p&gt;My research requires that I work in multiple locations: in the lab, at a multi-institution shared instrument facility, and sometimes in my fuzzy slippers at home. Having my data and processing scripts updated on whatever computer I happen to be using is critical to my ability to get work done. Since these files are too large for Dropbox storage to be economical, I have previously relied on programs such as &lt;a href="http://www.cis.upenn.edu/~bcpierce/unison/"&gt;Unison&lt;/a&gt; and &lt;a href="http://www.econtechnologies.com/pages/cs/chrono_overview.html"&gt;ChronoSync&lt;/a&gt;. Unfortunately, these tools require some manual effort&lt;sup id="fnref:auto"&gt;&lt;a class="footnote-ref" href="#fn:auto" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; to ensure my ever-growing research directory is updated when switching computers, a process that sometimes happens multiple times per day. &lt;/p&gt;
&lt;p&gt;Having endured this daily nuisance of file synchronization for several years, I was thrilled to discover the recent release of &lt;a href="http://www.bittorrent.com/sync"&gt;BitTorrent Sync&lt;/a&gt;, which relies on the BitTorrent protocol. I used torrents in my graduate school days to download Linux distributions because I found this method was generally faster than using a web browser. Applying this protocol to the synchronization of files is, to me, a natural extension of its powerful feature set.&lt;/p&gt;
&lt;p&gt;Before delving further into the setup of BitTorrent Sync, it is important to understand how the BitTorrent protocol works. Traditional cloud storage systems, such as Dropbox, utilize a centralized, master server to which all clients upload and download files. The BitTorrent protocol instead allows every client to upload and download to all other clients. This decentralized, peer-to-peer model requires the user to provide the devices that will serve as synchronization points (peers), but that requirement also has many advantages. In situations where large file sets are synchronized, it is often more cost efficient to provide your own hardware, which you may already own, than pay the fee for increased cloud storage. The BitTorrent protocol also allows users to avoid storing data on servers belonging to someone else, potentially making BitTorrent Sync more private.&lt;/p&gt;
&lt;p&gt;BitTorrent Sync has been robust and very fast based on my experience thus far. It has tremendous potential for the synchronization and sharing of large data sets, such as those generated by scientists, within a single research group. Perhaps more importantly, BitTorrent Sync can make sharing data with other research groups through open data initiatives, such as &lt;a href="http://academictorrents.com"&gt;Academic Torrents&lt;/a&gt;, much easier.&lt;/p&gt;
&lt;h2&gt;BitTorrent Sync Setup on a Mac&lt;/h2&gt;
&lt;p&gt;The Mac BitTorrent Sync application is simple to setup. The first time a folder to be synchronized is added to your list of torrents, BitTorrent Sync has to generate a shared secret code. Anyone who has this code can download and modify files in the torrent, so guard it carefully. Additional instances of this torrent should use the previously generated shared secret. Based on my experience, BitTorrent Sync will try to use existing files for the initial synchronization, so it is possible to speed up this process by pre-populating peer directories with updated copies of the file set.&lt;/p&gt;
&lt;p&gt;There are some additional options for controlling BitTorrent Sync that don't reside within the application. Inside each synchronized folder is a file called &lt;code&gt;.SyncIgnore&lt;/code&gt; and a directory called &lt;code&gt;.SyncArchive&lt;/code&gt;. The former contains a list of files and folders that will be ignored during synchronization, with support for basic file globbing, such as '&lt;code&gt;*&lt;/code&gt;' and '&lt;code&gt;?&lt;/code&gt;'. The &lt;code&gt;.SyncArchive&lt;/code&gt; directory contains old versions of all files that have been changed or deleted. The &lt;code&gt;.SyncArchive&lt;/code&gt; option seems to keep versions indefinitely and can optionally be disabled within the application on each of the peers.&lt;/p&gt;
&lt;h2&gt;Other Features and Comparison to Dropbox&lt;/h2&gt;
&lt;p&gt;The features offered by BitTorrent Sync are similar to those of Dropbox in more ways than just the real-time synchronization of files. And there are also some important differences. The previously mentioned options to exclude files from synchronization and store modified or deleted files are similar to Dropbox's selective synchronization and versions features, respectively. The inclusion of file globbing in BitTorrent Sync's file exclusion implementation makes it more powerful than Dropbox's. On the other hand, I think Dropbox's file versioning system, which includes a web browser component, is more user friendly.&lt;/p&gt;
&lt;p&gt;Like Dropbox, files can also be shared with others using BitTorrent Sync, but it is only possible to do so as a torrent--there is no official option for downloading files through a web browser. Additionally, a share from BitTorrent Sync must include the entire contents of the torrent. However it is possible to restrict these shares to read-only access and set a time limit of 24 hours for downloading.&lt;/p&gt;
&lt;p&gt;Perhaps the most important--and very subtle--difference between BitTorrent Sync and Dropbox is that BitTorrent Sync &lt;em&gt;does not&lt;/em&gt; support extended attributes. This is not an issue for me as most of my research files are generated on Linux filesystems, which do not regularly use extended attributes. Those files that do have extended attributes, mostly generated by Microsoft Office and iWork, don't seem to actually use them. I have verified this through years of synchronizing files using methods that do not support extended attributes. Usage scenarios differ, however, so this issue should be tested carefully. For example, heavy users of file tagging in Mavericks or PDF annotations in &lt;a href="http://skim-app.sourceforge.net"&gt;Skim&lt;/a&gt;, both of which rely on extended attributes, may find that BitTorrent Sync does not suit their needs.&lt;/p&gt;
&lt;h2&gt;Additional BitTorrent Sync Servers&lt;/h2&gt;
&lt;p&gt;Though my primary need is the synchronization of files between two Macs, there are advantages to having additional file servers. A minimum of one fully updated peer is required for synchronization, so increasing the number of servers adds robustness to the system. Similarly, additional peers provide more download sources during synchronization, which can make this process faster. For these reasons, I am also running BitTorrent Sync on a web server and on a Drobo 5N. The setup of BitTorrent Sync on these two clients is more complicated than on the Mac, so I have outlined both processes below.&lt;/p&gt;
&lt;h4&gt;Setup on a Web Server&lt;/h4&gt;
&lt;p&gt;Based on the recommendation of several users on the BitTorrent Sync forums, I purchased a virtual private server from a backup-focused service called &lt;a href="https://backupsy.com/aff.php?aff=210"&gt;Backupsy&lt;/a&gt;. The service offers a variety of configurations at a very reasonable cost.&lt;sup id="fnref:promo"&gt;&lt;a class="footnote-ref" href="#fn:promo" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I decided to use the default BitTorrent Sync command line program for &lt;a href="http://www.bittorrent.com/sync/downloads"&gt;Linux&lt;/a&gt; so I could configure everything exactly as I wished. Those who are familiar with the Debian package management system might prefer the user-maintained &lt;a href="http://forum.bittorrent.com/topic/18974-debian-and-ubuntu-server-unofficial-packages-for-bittorrent-sync/"&gt;package&lt;/a&gt;. The BitTorrent Sync program, called &lt;code&gt;btsync&lt;/code&gt; on Linux, can create a default text configuration file. I used this as well as &lt;a href="http://blog.bittorrent.com/2013/09/17/sync-hacks-how-to-set-up-bittorrent-sync-on-ubuntu-server-13-04/"&gt;online resources&lt;/a&gt; to get started. &lt;/p&gt;
&lt;p&gt;The Linux version of BitTorrent Sync comes with a web interface enabled by default, which provides a convenient GUI for managing torrents. However, I opted to disable it since the only available security settings are a username and password, which could theoretically be determined by brute force methods.&lt;sup id="fnref:sshsec"&gt;&lt;a class="footnote-ref" href="#fn:sshsec" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;There were two "gotchas" I discovered while setting up my web server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, it seems the destination directory must exist before starting BitTorrent Sync otherwise no files will be downloaded.&lt;/li&gt;
&lt;li&gt;Second, the BitTorrent Sync web interface cannot be run if the &lt;code&gt;shared_folders&lt;/code&gt; option is used within the configuration file. It is possible to switch between the two methods without resetting the synchronization state by modifying the configuration file (see below) and restarting BitTorrent Sync. Both options cannot be run at once, though.&lt;sup id="fnref:manual"&gt;&lt;a class="footnote-ref" href="#fn:manual" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is my configuration file for BitTorrent Sync on my Backupsy server. The first line of the file contains an example of how the configuration file is loaded as a BitTorrent Sync instance. The web interface is setup in the &lt;code&gt;webui&lt;/code&gt; section. Alternatively, the &lt;code&gt;shared_folders&lt;/code&gt; section is used if &lt;code&gt;webui&lt;/code&gt; is disabled, as has been setup below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// /home/user/btsync/bin/btsync --nodaemon --log file --config /home/user/btsync/conf/my_btsync.conf
// web interface is disabled
{
        &amp;quot;device_name&amp;quot;: &amp;quot;Phog&amp;quot;,
        &amp;quot;storage_path&amp;quot; : &amp;quot;/home/user/btsync/sync&amp;quot;,
        &amp;quot;listening_port&amp;quot; : 0,
        &amp;quot;check_for_updates&amp;quot; : false,
        &amp;quot;use_upnp&amp;quot; : false,
        &amp;quot;download_limit&amp;quot; : 0,
        &amp;quot;upload_limit&amp;quot; : 0,
        &amp;quot;disk_low_priority&amp;quot; : true,
        &amp;quot;lan_encrypt_data&amp;quot; : true,
        &amp;quot;lan_use_tcp&amp;quot; : true,
        &amp;quot;rate_limit_local_peers&amp;quot; : false,
        &amp;quot;folder_rescan_interval&amp;quot; : 600,
        &amp;quot;webui&amp;quot; :
        {
                // &amp;quot;listen&amp;quot; : &amp;quot;0.0.0.0:8888&amp;quot;,
                // &amp;quot;login&amp;quot; : &amp;quot;xxx&amp;quot;,
                // &amp;quot;password&amp;quot; : &amp;quot;xxx&amp;quot;
        },
        &amp;quot;shared_folders&amp;quot;:
        [
                {
                        &amp;quot;secret&amp;quot;:&amp;quot;xxx&amp;quot;,
                        &amp;quot;dir&amp;quot;:&amp;quot;/home/user/research&amp;quot;,
                        &amp;quot;use_relay_server&amp;quot;:true,
                        &amp;quot;use_dht&amp;quot;:false,
                        &amp;quot;search_lan&amp;quot;:false,
                        &amp;quot;use_sync_trash&amp;quot;:true
                }
          ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Setup on a Drobo 5N&lt;/h4&gt;
&lt;p&gt;BitTorrent Sync is also compiled for ARM processors, which means it will run on Drobo storage devices. Setting up BitTorrent Sync on a Drobo is a little more complicated than a Linux server since the Drobo operating system doesn't have ssh and various unix utilities installed out of the box. The &lt;a href="http://www.droboports.com/using-command-line-apps"&gt;DroboPorts website&lt;/a&gt; contains good instructions for setting up &lt;a href="http://www.drobo.com/products/professionals/drobo-fs/apps/"&gt;dropbear&lt;/a&gt; for ssh access, and &lt;a href="http://www.droboports.com/app-repository/vim-7-3/"&gt;vim&lt;/a&gt; for remotely editing text files. To setup BitTorrent Sync, I roughly followed &lt;a href="http://forum.bittorrent.com/topic/8578-supported-nas/page-6#entry62610"&gt;these&lt;/a&gt; instructions. Since the Drobo is only accessible within my home network, I am using the BitTorrent Sync web interface for now. &lt;/p&gt;
&lt;h2&gt;Other BitTorrent Sync Notes&lt;/h2&gt;
&lt;p&gt;There are mobile (iOS and Android) versions of BitTorrent Sync available. Much like their Dropbox counterparts, these applications refresh a file listing for associated torrents when opened but only download files on demand. Torrents can be added by scanning a QR code generated by the desktop application, which is both an awesome use of QR codes and easier than typing the shared secret on a mobile device. The mobile BitTorrent Sync application has an option to automatically backup pictures from the device.&lt;/p&gt;
&lt;p&gt;Currently, it is not possible to check the status of torrents from the command line. This can only be done using the BitTorrent Sync web interface. In the future, I'd love to see a command line option added so I can create an automated method to check the status of BitTorrent Sync on my web server.&lt;/p&gt;
&lt;p&gt;I currently use a derivation of an rsync-based script, called &lt;a href="http://www.rsnapshot.org"&gt;rsnapshot&lt;/a&gt;, to imitate the incremental backups created by Apple's Time Machine because I have had many issues with Time Machine in the past. This script was formerly used to synchronize files from my laptop to the Drobo when I was at home. Now that the Drobo always contains an updated copy of my files, I am experimenting with running rsnapshot directly on the Drobo and synchronizing files directly from my torrent directory.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:auto"&gt;
&lt;p&gt;Various automation programs could be used to run these programs at regular intervals. However, ssh tunneling to my computer in lab is sometimes problematic due to university-imposed firewall rules, so I do not feel comfortable assuming an automated synchronization method completed successfully.&amp;#160;&lt;a class="footnote-backref" href="#fnref:auto" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:promo"&gt;
&lt;p&gt;There is a promotion code (GOTMEADEAL) which offers a significant discount for the lifetime of the virtual machine.&amp;#160;&lt;a class="footnote-backref" href="#fnref:promo" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:sshsec"&gt;
&lt;p&gt;I can't stress how important security is for a web-accessible server. In the approximately 20 minutes from when Backupsy provisioned my server to the time that I disabled ssh access for root, there were over 50 attempts from a foreign IP address to determine the root password by brute force methods.&amp;#160;&lt;a class="footnote-backref" href="#fnref:sshsec" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:manual"&gt;
&lt;p&gt;The inability to use &lt;code&gt;shared_folders&lt;/code&gt; and &lt;code&gt;webui&lt;/code&gt; at the same time is mentioned in the BitTorrent Sync &lt;a href="http://btsync.s3-website-us-east-1.amazonaws.com/BitTorrentSyncUserGuide.pdf"&gt;manual&lt;/a&gt;, but I didn't discover this until after puzzling over the issue for some time. RTFM.&amp;#160;&lt;a class="footnote-backref" href="#fnref:manual" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Thu, 06 Feb 2014 19:48:00 -0500</pubDate><guid>tag:www.themodernscientist.com,2014-02-06:posts/2014/2014-02-06-torrential_file_synchronization/</guid><category>mac</category><category>shell</category><category>automation</category><category>openscience</category></item><item><title>Automated Notifications of Experiment Progress: Prowl Extra Credit</title><link>http://www.themodernscientist.com/posts/2013/2013-10-19-automated_notifications_of_experiment_progress_part_2/</link><description>&lt;p&gt;Previously, I &lt;a href="http://themodernscientist.com/posts/2013/2013-10-12-automated_notifications_of_experiment_progress/"&gt;posted&lt;/a&gt; about using &lt;a href="http://growl.info/"&gt;Growl&lt;/a&gt; in combination with &lt;a href="http://www.prowlapp.com/"&gt;Prowl&lt;/a&gt; to get remote notifications of experiment progress on both a Mac and iPhone. Later that day, I started thinking about some improvements to the script after a brief Twitter &lt;a href="https://twitter.com/modernscientist/status/389159633753210880"&gt;conversation&lt;/a&gt; with &lt;a href="https://twitter.com/DrBunsen"&gt;Seth Brown&lt;/a&gt;.&lt;sup id="fnref:follow"&gt;&lt;a class="footnote-ref" href="#fn:follow" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;/p&gt;
&lt;p&gt;The script depends on the remote Mac being always on and reachable from the internet. This is true for my Mac desktop, but it may not be in many other situations, such as when a laptop is involved. In cases such as these, the notification can be sent directly to Prowl from the shell script itself.&lt;sup id="fnref:alt"&gt;&lt;a class="footnote-ref" href="#fn:alt" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;/p&gt;
&lt;p&gt;Posting to Prowl requires only one additional piece of information: a Prowl API key. The API key can be generated and accessed from Prowl's &lt;a href="https://www.prowlapp.com/api_settings.php"&gt;website&lt;/a&gt; after logging in. The API key is circled in red below. If there are no active keys,&lt;sup id="fnref:api"&gt;&lt;a class="footnote-ref" href="#fn:api" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; they can be generated on this page as well.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Prowl API Key Generation&amp;quot;" src="http://www.themodernscientist.com/images/2013-10-19_automated_notifications_of_experiment_progress_part_2_1.png" title="Prowl API Key Generation" /&gt;&lt;/p&gt;
&lt;p&gt;Posting to Prowl using an API key is described in the &lt;a href="http://www.prowlapp.com/api.php"&gt;documentation&lt;/a&gt;, but it is quite simple and can be accomplished from the command line with &lt;code&gt;curl&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl -s --data \
&amp;quot;apikey=enter_your_api_key_here&amp;amp;application=Command Line&amp;amp;event=Posting to Prowl&amp;quot; \
https://api.prowlapp.com/publicapi/add
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Prowl's API then returns an xml string containing &lt;a href="http://www.prowlapp.com/api.php#return"&gt;information&lt;/a&gt; about the success or failure of the post attempt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;prowl&amp;gt;
&amp;lt;success code=&amp;quot;200&amp;quot; remaining=&amp;quot;993&amp;quot; resetdate=&amp;quot;1382212452&amp;quot; /&amp;gt;
&amp;lt;/prowl&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;According to Prowl's documentation, 1,000 API calls are allowed per hour from a single IP address. That should be plenty for simple status posts.&lt;/p&gt;
&lt;p&gt;I have also created a new version of the associated shell script that will attempt to ping the remote computer before synchronizing data and sending a Growl notification. If the remote computer is not available, the notification will be posted directly to Prowl.&lt;/p&gt;
&lt;p&gt;[gist:id=7060718,file=Improved_Growl_Experiment_Status.sh]&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:follow"&gt;
&lt;p&gt;If you are interested in python, data visualization, R, and pretty much every other cool thing on the internet, you should definitely follow him and read his &lt;a href="http://www.drbunsen.org/"&gt;blog&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:follow" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:alt"&gt;
&lt;p&gt;This alternative could be also be used exclusively instead of Growl. However, I prefer receiving notifications on my Mac if I am actively using it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:alt" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:api"&gt;
&lt;p&gt;I set up my Prowl account so long ago, that I don't recall if the initial API key was active or if I generated it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:api" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Sat, 19 Oct 2013 15:19:00 -0400</pubDate><guid>tag:www.themodernscientist.com,2013-10-19:posts/2013/2013-10-19-automated_notifications_of_experiment_progress_part_2/</guid><category>science</category><category>shell</category><category>automation</category><category>mac</category><category>ios</category></item><item><title>Automated Notifications of Experiment Progress: Combining Shell, SSH, Growl, and Prowl</title><link>http://www.themodernscientist.com/posts/2013/2013-10-12-automated_notifications_of_experiment_progress/</link><description>&lt;p&gt;In addition to covering my use of python in research, one of my goals for this blog is to share ways I use various other computational tools to automate basic research tasks. Such an opportunity arose this week with the onset of hardware issues causing one of our laboratory's NMR spectrometers to periodically stop running during a series of multiple day experiments. The instrument is still useable while waiting for a replacement part to arrive, but periodic reboots of the hardware are necessary for the experiment to continue where it left off. Thus, it is critical to know when such a reboot is necessary. Rather than make constant trips to the building where the instrument is located, I rigged up a notification system using some basic unix and Mac tools. &lt;/p&gt;
&lt;p&gt;The instrument periodically writes data to a file when an experiment is running. So, my solution is a shell script that periodically monitors this file for updates and then sends &lt;a href="http://growl.info/"&gt;Growl&lt;/a&gt; notifications to my Mac, which is located in another building.&lt;sup id="fnref:vnc"&gt;&lt;a class="footnote-ref" href="#fn:vnc" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; Because Growl on my Mac is configured to work with &lt;a href="http://www.prowlapp.com/"&gt;Prowl&lt;/a&gt;, a complimentary iOS notification system,&lt;sup id="fnref:boxcar"&gt;&lt;a class="footnote-ref" href="#fn:boxcar" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; I also receive notifications on my phone whenever the remote Mac is idle. As a bonus, I added the option to send the experimental data to my Mac for processing.&lt;/p&gt;
&lt;p&gt;This solution requires &lt;a href="http://sshkeychain.sourceforge.net/mirrors/SSH-with-Keys-HOWTO/SSH-with-Keys-HOWTO-4.html"&gt;SSH keys&lt;/a&gt; to be setup so the spectrometer's computer can login to my Mac when necessary. It also requires the installation of &lt;a href="http://growl.info/downloads#growlnotify"&gt;growlnotify&lt;/a&gt;, a command line accessory to Growl.&lt;/p&gt;
&lt;p&gt;[gist:id=6951180,file=Growl_Experiment_Status.sh]&lt;/p&gt;
&lt;p&gt;The script is written in the Z-shell&lt;sup id="fnref:zsh"&gt;&lt;a class="footnote-ref" href="#fn:zsh" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; and can be downloaded &lt;a href="https://gist.github.com/mlgill/6951180"&gt;here&lt;/a&gt;. It asks for several configuration options, ensures the file that is used to track experiment progress exists, and then performs periodic checks on the modification time of this file until the script is halted. The optional transfer of data takes place via rsync&lt;sup id="fnref:rsync"&gt;&lt;a class="footnote-ref" href="#fn:rsync" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;. The interval time must be adjusted so that the data file is written to more frequently than it is polled for modifications, otherwise the script will incorrectly indicate the experiment has stalled.&lt;/p&gt;
&lt;p&gt;There are a few nuances associated with the encoding of the growlnotify string. First, the entire command has to be enclosed in quotes because it is sent through ssh to the remote Mac. Additionally, each of the arguments passed to growlnotify, such as the contents of the &lt;code&gt;$message_string&lt;/code&gt; variable, must themselves be enclosed in quotes when executed on the remote Mac. I prefer to use single quotes for the growlnotify command and double quotes for the individual arguments. However, variables, such as &lt;code&gt;$message_string&lt;/code&gt;, are not expanded within single quotes, so they must appear outside of the single quotes, as can be seen above. The contents of &lt;code&gt;$message_string&lt;/code&gt; must still be enclosed in double quotes, which appear before and after the respective single quotes flanking &lt;code&gt;$message_string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once I start my experiment on the spectrometer, I setup this script to run indefinitely. An added bonus is that it will notify you when the experiment has finished. If the instrument writes progress information to a plain text log file, this file can be queried and more detailed status information that can be included in the &lt;code&gt;$message_string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is an example&lt;sup id="fnref:secret"&gt;&lt;a class="footnote-ref" href="#fn:secret" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; of the Prowl status updates I receive on my iPhone. The actual script I use derives additional information from the log file of the NMR spectrometer.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Prowl Status Updates&amp;quot;" src="http://www.themodernscientist.com/images/2013-10-12_automated_notifications_of_experiment_progress_1.jpg" title="Prowl Status Updates" /&gt;&lt;/p&gt;
&lt;p&gt;This is a script I have been meaning to write for quite some time and I plan to use it, perhaps with less frequent notification times, even after the spectrometer is repaired.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:vnc"&gt;
&lt;p&gt;VNC could also be used to to check on the experiment, but I prefer a method that also notifies me when I am away from my computer.&amp;#160;&lt;a class="footnote-backref" href="#fnref:vnc" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:boxcar"&gt;
&lt;p&gt;There are other notification systems that will also work with Growl. I've also used &lt;a href="http://boxcar.io/download_mac"&gt;Boxcar&lt;/a&gt;, but I switched to Prowl after Boxcar became unreliable at times.&amp;#160;&lt;a class="footnote-backref" href="#fnref:boxcar" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:zsh"&gt;
&lt;p&gt;I believe it will run in Bash with minimal or no modifications; however, if you're not using the Z-shell, you &lt;a href="http://scottlab.ucsc.edu/~wgscott/xtal/wiki/index.php/ZSH_on_OS_X"&gt;should be&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:zsh" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:rsync"&gt;
&lt;p&gt;When using rsync in a script, I prefer the long version of argument names for readability because I never remember what the short versions mean.&amp;#160;&lt;a class="footnote-backref" href="#fnref:rsync" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:secret"&gt;
&lt;p&gt;With super secret science stuff obscured.&amp;#160;&lt;a class="footnote-backref" href="#fnref:secret" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Sat, 12 Oct 2013 15:19:00 -0400</pubDate><guid>tag:www.themodernscientist.com,2013-10-12:posts/2013/2013-10-12-automated_notifications_of_experiment_progress/</guid><category>science</category><category>shell</category><category>automation</category><category>mac</category><category>ios</category></item><item><title>My Octopelican Python Blog</title><link>http://www.themodernscientist.com/posts/2013/2013-06-02-my_octopelican_python_blog/</link><description>&lt;p&gt;Many have asked about my blog design and how I incorporate IPython notebooks, such as the one used in the &lt;a href="http://themodernscientist.com/posts/2013/2013-05-29-binary_integer_programming_with_python/"&gt;previous post&lt;/a&gt;. I merely glued all the pieces together for this setup, so to give credit where it is due and to provide a documented how-to for my future self, I've described both blog design and incorporating IPython notebooks into posts.&lt;/p&gt;
&lt;p&gt;My desire for this blog has always been to have a platform for sharing useful and sometimes interesting information related to my research and to provide an opportunity to learn, which for me means tinkering. As someone who does not have extensive knowledge of CSS or other web-centric languages, I knew I wanted to use a template-based solution rather than coding a website from scratch. However, the inevitable desire to tinker meant that browser-based template options, such as those offered by Wordpress and Blogger, wouldn't suffice. Solutions that compile templates locally, such as Octopress, allow more customization and, thus, seemed like a good option. The downside of Octopress is that it uses ruby, which I don't know. After more searching, I discovered &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt;, which works similarly to Octopress but is written in my beloved Python. Having a blogging engine that speaks the same language as the topic of much of the content I envisioned posting seemed like a natural solution.&lt;/p&gt;
&lt;p&gt;After settling on a blogging solution, I had to find a Pelican-based template. Having browsed many Octopress blogs, I developed an affinity for the default template used by this engine. Fortunately, a kind soul had converted the Octopress template to Pelican and &lt;a href="https://github.com/duilio/pelican-octopress-theme"&gt;shared&lt;/a&gt; it. Since I prefer lighter tones for websites and the default format of this template is quite dark, I wanted to modify it. I found an excellent tutorial by Aijaz Ansari on &lt;a href="http://aijazansari.com/2012/08/27/how-to-customize-octopress-theme/"&gt;customizing&lt;/a&gt; this theme within Octopress and was able to apply these changes directly because the CSS portion of this template is identical to the Pelican version. These theme modifications are based on &lt;a href="http://sass-lang.com/"&gt;SASS&lt;/a&gt;, so I did need to break out my ruby chops to compile&lt;sup id="fnref:compass"&gt;&lt;a class="footnote-ref" href="#fn:compass" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; the modified theme into CSS&lt;sup id="fnref:cssdown"&gt;&lt;a class="footnote-ref" href="#fn:cssdown" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The last step was adding the ability to insert IPython notebooks in blog posts. Fortunately, Jake Vanderplas recently &lt;a href="http://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican/"&gt;posted&lt;/a&gt; about doing so in Pelican. He even created a Pelican extension, called &lt;a href="https://github.com/getpelican/pelican-plugins/pull/21"&gt;liquid tags&lt;/a&gt;, capable of inserting an IPython notebook referenced in a markdown post. If you go this route, please be aware that liquid tags is very new--as of the writing of this post, it is still a pull request on GitHub. Furthermore, liquid tags depends on &lt;a href="https://github.com/ipython/nbconvert"&gt;nbconvert&lt;/a&gt;, an IPython utility for converting notebooks to html and other formats, which itself is currently being rewritten. Thus, any efforts in this area will likely have to be duplicated again in the future once these packages stabilize. For the fearless, I have described the installation in more detail &lt;a href="https://github.com/modernscientist/modernscientist.github.com/blob/master/notes/importing_ipython_notebooks_in_a_pelican_blog.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:compass"&gt;
&lt;p&gt;This requires installation of the &lt;code&gt;compass&lt;/code&gt; ruby gem. Once installed, the CSS is compiled by running &lt;code&gt;compass compile&lt;/code&gt; from the top directory of the theme (where &lt;code&gt;config.rb&lt;/code&gt; is located). The compiled file is created in &lt;code&gt;static/css/main.css&lt;/code&gt; of the theme and will be copied to the correct directory upon blog generation with pelican.&amp;#160;&lt;a class="footnote-backref" href="#fnref:compass" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:cssdown"&gt;
&lt;p&gt;The compiled CSS file used for this blog can be downloaded &lt;a href="https://github.com/modernscientist/modernscientist.github.com/blob/master/theme/css/main.css"&gt;here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:cssdown" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Sun, 02 Jun 2013 15:48:00 -0400</pubDate><guid>tag:www.themodernscientist.com,2013-06-02:posts/2013/2013-06-02-my_octopelican_python_blog/</guid><category>meta</category><category>python</category></item><item><title>Please Update Your RSS Subscription</title><link>http://www.themodernscientist.com/posts/2013/2013-05-26-please_update_your_rss_subscription/</link><description>&lt;p&gt;You are receiving this post because I’ve migrated my RSS feeds from FeedBurner to URI.LV. I attempted to automatically migrate all subscribers to the new feed but, due to consequences outside my control, that wasn’t possible. So, I’d greatly appreciate it if you could resubscribe using the new feed at &lt;a href="http://feeds.uri.lv/themodernscientist-rss"&gt;http://feeds.uri.lv/themodernscientist-rss&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Sun, 26 May 2013 13:25:00 -0400</pubDate><guid>tag:www.themodernscientist.com,2013-05-26:posts/2013/2013-05-26-please_update_your_rss_subscription/</guid></item><item><title>For Some, This is a Busy Week</title><link>http://www.themodernscientist.com/posts/2013/2013-04-07-for_some_this_is_a_busy_week/</link><description>&lt;p&gt;The coming week is going to be an incredibly busy, but exciting, one for me. Besides having updated my blog so that I am now one of the cool kids with a &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;-generated blog hosted at &lt;a href="https://github.com/modernscientist/modernscientist.github.com"&gt;GitHub&lt;/a&gt;,&lt;sup id="fnref:rss"&gt;&lt;a class="footnote-ref" href="#fn:rss" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; the following things are also taking place:&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;I will become a parent to an adopted kitty&lt;/li&gt;
&lt;li&gt;I will become an aunt to a new human&lt;/li&gt;
&lt;li&gt;I will be hosting my darling sister-in-law who will be visiting me for the first time since I’ve lived in NYC&lt;/li&gt;
&lt;li&gt;I will be away most of the week for some academic job interview thing :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Needless to say, my presence online will be scarce. And the list of future blog posts continues to build.&lt;sup id="fnref:pics"&gt;&lt;a class="footnote-ref" href="#fn:pics" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:rss"&gt;
&lt;p&gt;For the three or so of you who subscribe via RSS or email (hi, mom!), old posts are likely to show up in your inbox again since the setup of the feed has changed. I apologize for the inconvenience.&amp;#160;&lt;a class="footnote-backref" href="#fnref:rss" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:pics"&gt;
&lt;p&gt;Some of these posts will include pictures of the adorable new creatures in my life.&amp;#160;&lt;a class="footnote-backref" href="#fnref:pics" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Sun, 07 Apr 2013 23:14:00 -0400</pubDate><guid>tag:www.themodernscientist.com,2013-04-07:posts/2013/2013-04-07-for_some_this_is_a_busy_week/</guid><category>pets</category><category>life</category></item><item><title>To My Friend</title><link>http://www.themodernscientist.com/posts/2013/2013-03-16-to_my_friend/</link><description>&lt;p&gt;This is, in so many ways, not the topic I envisioned for my second post. Sometimes life has other plans.&lt;/p&gt;


&lt;hr /&gt;
&lt;p&gt;I knew you were special the moment you leapt into my arms at the cat shelter in New Haven the day we met you. Though we hadn't stopped at the shelter with the intention of adopting, you had chosen us and that's the way it would be. We had just moved far away from our relatives and friends, and you provided roots and a feeling of belonging. With you, we were a family. Our dwelling became a home.&lt;/p&gt;
&lt;p&gt;We named you Lawrence, in honor of the street in New Haven on which we lived and the nearby shelter where we met you. Coincidentally, it was also the name of the Midwestern town we had just left. The name was quirky and a little too distinguished for a cat, and it would prove to suit your personality exactly.&lt;/p&gt;
&lt;p&gt;You were a loyal companion throughout the many adventures life brought us. In graduate school, you helped me study for my oral exam, and you were by my side (or on top of my keyboard) when I wrote my thesis. During your time with us, you moved to nine different homes, one of which was a friend's guest room. You endured a drive across the country for one move and, for another, a flight, complete with a stress-filled scene at the security line. You tolerated an extended stay at a Days Inn, where we had to lock you in the bathroom every time we left in case housekeeping came. You took each of these adventures in stride, with the endearing aplomb and dash of absurdity that I'd come to love about you.&lt;/p&gt;
&lt;p&gt;Occasionally, your adventuresomeness outweighed your bravery, though we never could convince you of that truth. Twice you escaped into the great outdoors. Fortunately, you didn't get far before deciding that hiding under the deck was the quickest way to return to the comforts of home. &lt;/p&gt;
&lt;p&gt;Your were sometimes mischievous: teaching yourself to open cupboards and doors so you could get into things you weren't supposed to. You were often comical: twitching your tail in excitement and, when we scolded you, cackling in reply to mock us. You were always affectionate: during particularly enjoyable petting sessions, your purr was loud enough to make the cushions vibrate. &lt;/p&gt;
&lt;p&gt;I loved all of your quirks: the way you stretched your arms out in token resistance when we rubbed your belly; the bobbing of the tabby-striped rings on your tail as you trotted to the door to greet me every evening; the way your gorgeous green eyes twinkled with mischief; the twitching of your tri-color nose as you rubbed it against my cheek to wake me up to feed you; the way you snuggled in bed with Rob after I arose, a daily event that I dubbed "Bro Time".&lt;/p&gt;
&lt;p&gt;The end of your days with us came swiftly and unexpectedly. Your health was excellent, so I envisioned you as a cat whose longevity would be legendary. I was shocked and terrified as we rushed you in a cab to the emergency veterinary clinic the night you suddenly found yourself too weak to get into our bed. It broke my heart to see three people working to stabilize your condition as we left the hospital that night, but I was certain you would return home for many more years of adventures.&lt;/p&gt;
&lt;p&gt;It was not meant to be. The veterinarian bought you a few hours of reprieve from the bleeding caused by the cancer inside you. We took you home the next day and stuffed you full of all the tuna and affection you could handle. As the day passed, I could see your strength starting to fade. I would have given anything to stop time at that moment and spend a few more days with you.&lt;/p&gt;
&lt;p&gt;We laid you to rest that night, March 15, 2013. Eleven years, almost to the day, from the moment you first graced our lives. We were devastated by the abrupt end of your time with us, but we were relieved your suffering was brief. Though you were uncomfortable and too weak to walk near the end, you were nothing but the sweet and loving gentleman we knew. The happy times we had together will remain bright in our hearts and minds. Where you are now, we know there is an endless supply of tuna, ear scratches, and Bro Time.&lt;/p&gt;
&lt;p&gt;Goodbye, dear friend.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Lawrence, in happy times&amp;quot;" src="http://www.themodernscientist.com/images/2013-03-16_to_my_friend_1.jpeg" title="Lawrence, in happy times" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Sat, 16 Mar 2013 19:19:00 -0400</pubDate><guid>tag:www.themodernscientist.com,2013-03-16:posts/2013/2013-03-16-to_my_friend/</guid><category>pets</category><category>life</category></item><item><title>Hello, Part Deux</title><link>http://www.themodernscientist.com/posts/2012/2012-12-16-hello_part_deux/</link><description>&lt;p&gt;After much consternation and hand wringing, I am attempting to revive my blog. I've learned from previous deterrents and now have a clearer vision of the topics I'd like to cover. So, for the time being, I am simply saying "hello" and giving those interested the opportunity to subscribe.&lt;/p&gt;
&lt;p&gt;In the meantime, I leave you with a picture of one my&lt;sup id="fnref:nysbc"&gt;&lt;a class="footnote-ref" href="#fn:nysbc" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; toys: a 900 MHz nuclear magnetic resonance (NMR) spectrometer equipped with a cyropbrobe. This is an example&lt;sup id="fnref:eg"&gt;&lt;a class="footnote-ref" href="#fn:eg" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; of the instruments I use to collect data. You can learn a little more about me and how I use NMR &lt;a href="http://www.themodernscientist.com/pages/about.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Badass NMR Spectrometer&amp;quot;" src="http://www.themodernscientist.com/images/2012-12-15_hello_part_deux_1.jpeg" title="Badass NMR Spectrometer" /&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:nysbc"&gt;
&lt;p&gt;Property of the &lt;a href="http://www.nysbc.org"&gt;New York Structural Biology Center&lt;/a&gt; but I like to pretend it's mine.&amp;#160;&lt;a class="footnote-backref" href="#fnref:nysbc" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:eg"&gt;
&lt;p&gt;A &lt;em&gt;very&lt;/em&gt; nice example.&amp;#160;&lt;a class="footnote-backref" href="#fnref:eg" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">modernscientist</dc:creator><pubDate>Sun, 16 Dec 2012 15:19:00 -0500</pubDate><guid>tag:www.themodernscientist.com,2012-12-16:posts/2012/2012-12-16-hello_part_deux/</guid></item></channel></rss>